using System;
using System.Data.SqlClient;
using System.IO;
using System.Windows.Forms;
using iText.Kernel.Pdf;
using iText.Kernel.Pdf.Canvas.Parser;

namespace COMIC
{
    public partial class addchapterfrm : Form
    {
        int move;
        int movex;
        int movey;
        private byte[] chapterFileData; // لتخزين ملف الشابتر
        SqlConnection conn = new SqlConnection(@"Data Source=DESKTOP-R4AHNUG\SQLSERVER2022;Initial Catalog=comicproject;Integrated Security=True");

        public addchapterfrm()
        {
            InitializeComponent();
            LoadComicTitles(); // تحميل عناوين القصص في الكومبوبوكس
        }
      


      
       

     


        private void LoadComicTitles()
        {
            try
            {
                conn.Open();
                string query = "SELECT C_title FROM Comic";
                SqlCommand cmd = new SqlCommand(query, conn);
                SqlDataReader reader = cmd.ExecuteReader();

                while (reader.Read())
                {
                    comicnametxt.Items.Add(reader["C_title"].ToString());
                }

                reader.Close();
                conn.Close();
            }
            catch (Exception ex)
            {
                MessageBox.Show("خطأ أثناء تحميل عناوين القصص: " + ex.Message);
            }
        }

  


        private void addchapterbtn_Click_1(object sender, EventArgs e)
        {

            if (comicnametxt.SelectedItem != null &&
                !string.IsNullOrWhiteSpace(chapternumber.Text) &&
                !string.IsNullOrWhiteSpace(chaptertitletxt.Text) &&
                chapterFileData != null)
            {
                try
                {
                    string query = "INSERT INTO Chapter (chapnum, Ch_title, ChapterFile, C_title) " +
                                   "VALUES (@chapnum, @Ch_title, @ChapterFile, @C_title)";

                    SqlCommand cmd = new SqlCommand(query, conn);
                    cmd.Parameters.AddWithValue("@chapnum", chapternumber.Text);
                    cmd.Parameters.AddWithValue("@Ch_title", chaptertitletxt.Text);
                    cmd.Parameters.AddWithValue("@ChapterFile", chapterFileData);
                    cmd.Parameters.AddWithValue("@C_title", comicnametxt.SelectedItem.ToString());

                    conn.Open();
                    cmd.ExecuteNonQuery();
                    conn.Close();

                    MessageBox.Show("تمت إضافة الشابتر بنجاح!");
                }
                catch (Exception ex)
                {
                    MessageBox.Show("حدث خطأ أثناء إضافة الشابتر: " + ex.Message);
                }
            }
            else
            {
                MessageBox.Show("يرجى تعبئة جميع الحقول وتحميل ملف الشابتر.");
            }

        }

        private void choosefile_LinkClicked(object sender, LinkLabelLinkClickedEventArgs e)
        {

            OpenFileDialog openFileDialog = new OpenFileDialog
            {
                Filter = "PDF Files (.pdf)|.pdf|Text Files (.txt)|.txt|All Files (.)|.",
                Title = "اختر ملف الشابتر",
                InitialDirectory = @"C:\YourDefaultPath" // قم بتغيير هذا إلى مسار موجود على جهازك
            };

            if (openFileDialog.ShowDialog() == DialogResult.OK)
            {
                try
                {
                    string fileExtension = Path.GetExtension(openFileDialog.FileName).ToLower();

                    // قراءة الملف بناءً على النوع
                    if (fileExtension == ".txt")
                    {
                        // إذا كان الملف نصيًا
                        string fileContent = File.ReadAllText(openFileDialog.FileName);
                        chaptertitletxt.Text = fileContent; // عرض النص في TextBox
                    }
                    else if (fileExtension == ".pdf")
                    {
                        // إذا كان الملف PDF
                        string pdfContent = ExtractPdfContent(openFileDialog.FileName);
                        chaptertitletxt.Text = pdfContent; // عرض النص في TextBox
                    }
                    else
                    {
                        MessageBox.Show("نوع الملف غير مدعوم. يرجى اختيار ملف نصي أو PDF.");
                        return;
                    }

                    // تخزين الملف كبيانات ثنائية
                    using (FileStream fs = new FileStream(openFileDialog.FileName, FileMode.Open, FileAccess.Read))
                    {
                        using (BinaryReader br = new BinaryReader(fs))
                        {
                            chapterFileData = br.ReadBytes((int)fs.Length);
                        }
                    }

                    MessageBox.Show("تم تحميل الملف بنجاح!");
                }
                catch (Exception ex)
                {
                    MessageBox.Show("حدث خطأ أثناء تحميل الملف: " + ex.Message);
                }
            }

        }
        private string ExtractPdfContent(string filePath)
        {
            try
            {
                string pdfContent = "";
                using (PdfReader reader = new PdfReader(filePath))
                {
                    using (PdfDocument pdfDoc = new PdfDocument(reader))
                    {
                        for (int i = 1; i <= pdfDoc.GetNumberOfPages(); i++)
                        {
                            pdfContent += PdfTextExtractor.GetTextFromPage(pdfDoc.GetPage(i));
                        }
                    }
                }
                return pdfContent;
            }
            catch (Exception ex)
            {
                MessageBox.Show("حدث خطأ أثناء قراءة محتوى PDF: " + ex.Message);
                return null;
            }
        }
        private void guna2Button1_Click_1(object sender, EventArgs e)
        {
            this.Close();

        }

        private void guna2Button3_Click_1(object sender, EventArgs e)
        {

            if (WindowState == FormWindowState.Normal)
            {
                WindowState = FormWindowState.Maximized;
            }
            else
                WindowState = FormWindowState.Normal;
        }

        private void guna2Button2_Click_1(object sender, EventArgs e)
        {
            WindowState = FormWindowState.Minimized;

        }

        private void panel1_Paint(object sender, PaintEventArgs e)
        {

        }

        private void panel1_MouseDown_1(object sender, MouseEventArgs e)
        {
            move = 1;
            movex = e.X;
            movey = e.Y;
        }

        private void panel1_MouseUp_1(object sender, MouseEventArgs e)
        {
            move = 0;

        }

        private void panel1_MouseMove_1(object sender, MouseEventArgs e)
        {

            if (move == 1)
            {
                this.SetDesktopLocation(MousePosition.X - movex, MousePosition.Y - movey);
            }
        }
    }
}
